# coding=utf-8
import os
os.environ["PYTHONIOENCODING"] = "utf-8"
os.environ["LANG"] = "en_US.UTF-8"

import sys
sys.stdout.reconfigure(encoding='utf-8', errors='replace')
sys.stderr.reconfigure(encoding='utf-8', errors='replace')

import logging
import openai
import datetime
import json
from aiogram import Bot, Dispatcher, executor, types
from flask import Flask
from threading import Thread
from dotenv import load_dotenv

load_dotenv()  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# === –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ –∏ –ø–æ–¥–ø–∏—Å–∫–µ ===
TRIALS_FILE = "trials.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_info(user_id):
    try:
        with open(TRIALS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get(str(user_id), None)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ trials.json: %s", e)
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def set_user_info(user_id, info):
    try:
        try:
            with open(TRIALS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
        except:
            data = {}
        data[str(user_id)] = info
        with open(TRIALS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ trials.json: %s", e)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ Telegram-–±–æ—Ç ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: —Å—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ ‚Äì 14 –¥–Ω–µ–π, —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏—è ‚Äì 990 —Ä—É–±. –≤ –º–µ—Å—è—Ü
FREE_TRIAL_DAYS = 14
SUBSCRIPTION_PRICE_RUB = 990  # –≤ –º–µ—Å—è—Ü
MANAGER_CONTACT = "@methodk"  # –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    user_id = message.from_user.id
    user_info = get_user_info(user_id)
    now = datetime.datetime.now()
    if user_info is None:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º 14 –¥–Ω–µ–π
        expiration = now + datetime.timedelta(days=FREE_TRIAL_DAYS)
        user_info = {
            "trial_start": now.isoformat(),
            "expiration": expiration.isoformat()
        }
        set_user_info(user_id, user_info)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–æ–º–æ–≥—É –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è GPT ===
def build_prompt(message_text, user_id):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return f"""–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (ID: {user_id}).
–¶–µ–ª—å: –ø–æ–º–æ–≥–∞—Ç—å –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –∑–∞–¥–∞—á–∞—Ö, —Å–Ω–∏–∂–∞—Ç—å —Ö–∞–æ—Å –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏.
–í–æ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):
{message_text[:500]}
–ï—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ç—Ä–∞—Ç–∏—Ç –≤—Ä–µ–º—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ KPI ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–Ω–µ–¥—Ä–∏—Ç—å —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–ú–µ—Ç–æ–¥ –ö—É—Ñ—Ç—ã—Ä–µ–≤–∞".
"""

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message_handler()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    now = datetime.datetime.now()
    user_info = get_user_info(user_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å (—ç—Ç–æ —Ä–µ–¥–∫–æ, –µ—Å–ª–∏ /start —É–∂–µ –≤—ã–∑–≤–∞–Ω)
    if user_info is None:
        expiration = now + datetime.timedelta(days=FREE_TRIAL_DAYS)
        user_info = {
            "trial_start": now.isoformat(),
            "expiration": expiration.isoformat()
        }
        set_user_info(user_id, user_info)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
    expiration_date = datetime.datetime.fromisoformat(user_info["expiration"])
    if now > expiration_date:
        await message.reply(
            f"‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ {SUBSCRIPTION_PRICE_RUB} —Ä—É–±. –≤ –º–µ—Å—è—Ü, "
            f"–Ω–∞–ø–∏—Å–∞–≤ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É {MANAGER_CONTACT}."
        )
        return

    prompt = build_prompt(message.text, user_id)
    print("üëâ PROMPT:\n", prompt)
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7
        )
        reply_text = response["choices"][0]["message"]["content"]
        print("‚úÖ REPLY:\n", reply_text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT:", e)
        reply_text = f"üö´ GPT –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e}"

    try:
        reply_text = reply_text.encode('utf-8', errors='replace').decode('utf-8', errors='replace')
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:", e)
        reply_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞."
    await message.reply(reply_text)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
