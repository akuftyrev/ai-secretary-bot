# coding=utf-8
import os
os.environ["PYTHONIOENCODING"] = "utf-8"
os.environ["LANG"] = "en_US.UTF-8"

import sys
sys.stdout.reconfigure(encoding='utf-8', errors='replace')
sys.stderr.reconfigure(encoding='utf-8', errors='replace')

import logging
import openai
import datetime
from aiogram import Bot, Dispatcher, executor, types
from flask import Flask
from threading import Thread

# === Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª) ===
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# === –¢–æ–∫–µ–Ω—ã ===
TELEGRAM_TOKEN = '7967405734:AAHQ7iyLWD5x6pT7V6F5I7ubjY4CXXn1PGU'
OPENAI_API_KEY = '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'

openai.api_key = OPENAI_API_KEY

# === –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ ===
client_profile = {
    "name": "–ê—Ä—Ç–µ–º",
    "activation_date": "2025-04-03",
    "average_tasks_per_day": 20,
    "time_wasters": ["–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–æ—Ç–¥–µ–ª –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂"],
    "goals": [
        "–°–¥–µ–ª–∞—Ç—å –æ–±–æ—Ä–æ—Ç 225 000 —Ä—É–± (5 –ø—Ä–æ–¥–∞–∂ —Å—Ç–∞—Ä—Ç–µ—Ä–æ–≤)",
        "–ó–∞–≤–µ—Å—Ç–∏ 3 –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (360 000 —Ä—É–± * 3)"
    ],
    "personally_controlled_tasks": ["–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–æ–≤", "–ø—Ä–æ–¥–∞–∂–∏"]
}

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ Telegram-–±–æ—Ç ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message_handler(commands=['start'])
async def handle_start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø–æ–º–æ–≥—É –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å.")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º—Ç–∞ –¥–ª—è GPT ===
def build_prompt(message_text):
    return f"""–¢—ã ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—å –¥–ª—è –±–∏–∑–Ω–µ—Å-—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {client_profile['name']}.
–¶–µ–ª—å: –ø–æ–º–æ–≥–∞—Ç—å –µ–º—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–≤–æ–¥–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –∑–∞–¥–∞—á–∞—Ö, —Å–Ω–∏–∂–∞—Ç—å —Ö–∞–æ—Å, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–∞–∫ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ –∏ —Å –∑–∞–±–æ—Ç–æ–π.
–ö–æ–Ω—Ç–µ–∫—Å—Ç:
‚Äì –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞—á –≤ –¥–µ–Ω—å: {client_profile['average_tasks_per_day']}
‚Äì –û—Å–Ω–æ–≤–Ω—ã–µ "–ø–æ–∂–∏—Ä–∞—Ç–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–∏": {', '.join(client_profile['time_wasters'])}
‚Äì –¶–µ–ª–∏: {', '.join(client_profile['goals'])}
‚Äì –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ª–∏—á–Ω–æ: {', '.join(client_profile['personally_controlled_tasks'])}
–í–æ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—Ä–µ–∑–∞–Ω–æ –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):
{message_text[:500]}
–î–∞–π –æ—Ç–≤–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö —Å–≤–æ–µ–π —Ä–æ–ª–∏ AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—è.
–ï—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ç—Ä–∞—Ç–∏—Ç –≤—Ä–µ–º—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–≤, –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ KPI ‚Äî –ø–æ–¥—Å–≤–µ—Ç–∏ —ç—Ç–æ, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ–∂–ª–∏–≤–æ –≤–Ω–µ–¥—Ä–∏—Ç—å —Ç–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "–ú–µ—Ç–æ–¥ –ö—É—Ñ—Ç—ã—Ä–µ–≤–∞".
"""

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (7 –¥–Ω–µ–π) ===
def is_access_valid():
    start_date = datetime.datetime.strptime(client_profile['activation_date'], "%Y-%m-%d")
    return (datetime.datetime.now() - start_date).days < 7

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message_handler()
async def handle_message(message: types.Message):
    if not is_access_valid():
        await message.reply("‚è≥ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å AI-—Å–µ–∫—Ä–µ—Ç–∞—Ä—ë–º? –ù–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –ú–µ—Ç–æ–¥ –ö—É—Ñ—Ç—ã—Ä–µ–≤–∞.")
        return

    prompt = build_prompt(message.text)
    try:
        print("üëâ PROMPT:\n", prompt)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞:", e)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7
        )
        reply_text = response["choices"][0]["message"]["content"]
        print("‚úÖ REPLY:\n", reply_text)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT:", e)
        reply_text = f"üö´ GPT –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {e}"

    try:
        reply_text = reply_text.encode('utf-8', errors='replace').decode('utf-8', errors='replace')
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:", e)
        reply_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞."

    await message.reply(reply_text)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
